@page "/"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using System;
@using System.Linq;
@using System.Threading;
@using Andrew_Conley_Vector_Program_4

<PageTitle>Index</PageTitle>

<h1>--Shape Drawing Program--</h1>

Select your action on the tool box, then draw/change shapes inside the box.

<p>Mouse Position: X = @MouseX, Y = @MouseY</p>
<p>
    OnMouseDown: @(MouseDown ? "True" : "False") &nbsp;&nbsp;&nbsp;&nbsp; Current Action: @CurrentAction
</p>

<div style="position: absolute; width: 100%; height: 90vh; display: flex; justify-content: flex-start; align-items: flex-start;">
    <BECanvas @ref="_canvasRef" Width="1500" Height="1000"></BECanvas>
</div>

<div style="position: absolute; width: 100%; height: 90vh;">
    <div style="position: absolute; top: 50px; left: 10px; z-index: 10; display: flex; flex-direction: column; gap: 5px;">
        <button @onclick="() => { SelectTool(); ToggleTools(); }">Select</button>
        @if (ToolsVisable)
        {
            <button @onclick="DeleteTool">Delete</button>
            <button @onclick="ColorTool">Color</button>
            <button @onclick="ResizeTool">Resize</button>
            <button @onclick="ZReorderTool">Z-Order</button>
            <button @onclick="LineTool">Line</button>
            <button @onclick="RectTool">Rect</button>
            <button @onclick="OvalTool">Oval</button>
        }
        else
        {
            <button @onclick="LineTool">&nbsp;&nbsp;Line&nbsp;&nbsp;</button>
            <button @onclick="RectTool">&nbsp;&nbsp;Rect&nbsp;&nbsp;</button>
            <button @onclick="OvalTool">&nbsp;&nbsp;Oval&nbsp;&nbsp;</button>
        }
    </div>

    <div @onmousemove="UpdateMousePosition"
         @onmousedown="OnMouseDown"
         @onmouseup="OnMouseUp"
         style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;">
    </div>
</div>

@code {

    private BECanvasComponent? _canvasRef;
    private Canvas2DContext? context;
    private bool ToolsVisable = false;

    private double StartX, StartY, EndX, EndY;
    private bool IsDrawing = false;
    private List<Shape> shapes = new List<Shape>();

    private void ToggleTools() => ToolsVisable = !ToolsVisable;

    public double MouseX { get; set; }
    public double MouseY { get; set; }
    public bool MouseDown { get; set; } = false;
    public string CurrentAction { get; set; }

    public void UpdateMousePosition(MouseEventArgs e)
    {
        MouseX = e.PageX;
        MouseY = e.PageY;
    }

    public void OnMouseDown(MouseEventArgs e)
    {
        MouseDown = true;
        if ((CurrentAction == "RectTool" || CurrentAction == "LineTool") && !IsDrawing && context is not null)
        {
            StartX = e.PageX;
            StartY = e.PageY;
            IsDrawing = true;
        }
    }

    public async Task OnMouseUp(MouseEventArgs e)
    {
        MouseDown = false;
        if ((CurrentAction == "RectTool" || CurrentAction == "LineTool") && IsDrawing && context is not null)
        {
            EndX = e.PageX;
            EndY = e.PageY;
            IsDrawing = false;

            if (CurrentAction == "RectTool")
            {
                shapes.Add(new RectangleShape { X = StartX, Y = StartY, Width = EndX - StartX, Height = EndY - StartY });
            }
            else if (CurrentAction == "LineTool")
            {
                shapes.Add(new LineShape { X1 = StartX, Y1 = StartY, X2 = EndX, Y2 = EndY });
            }
        }
    }

    System.Threading.Timer? timer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _canvasRef is not null)
        {
            context = await _canvasRef.CreateCanvas2DAsync();
            timer = new System.Threading.Timer(OnTick, null, 0, 5);
        }
    }

    protected async void OnTick(object? obj)
    {
        if (context is null) return;

        await context.BeginBatchAsync();
        await context.ClearRectAsync(0, 0, 1500, 1000);

        await context.SetStrokeStyleAsync("black");

        double borderStartX = 0;
        double borderStartY = 233;
        double borderWidth = 1500;
        double borderHeight = 1000 - 233;

        await context.StrokeRectAsync(borderStartX, borderStartY, borderWidth, borderHeight);

        foreach (var shape in shapes)
        {
            await shape.Draw(context);
        }

        await context.EndBatchAsync();
    }

    public void SelectTool() => CurrentAction = "SelectTool";
    public void DeleteTool() => CurrentAction = "DeleteTool";
    public void ColorTool() => CurrentAction = "ColorTool";
    public void ResizeTool() => CurrentAction = "ResizeTool";
    public void ZReorderTool() => CurrentAction = "ZReorderTool";
    public void LineTool() => CurrentAction = "LineTool";
    public void RectTool() => CurrentAction = "RectTool";
    public void OvalTool() => CurrentAction = "OvalTool";

    public abstract class Shape
    {
        public abstract Task Draw(Canvas2DContext context);
    }

    public class RectangleShape : Shape
    {
        public double X { get; set; }
        public double Y { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }

        public override async Task Draw(Canvas2DContext context)
        {
            await context.StrokeRectAsync(X, Y, Width, Height);
        }
    }

    public class LineShape : Shape
    {
        public double X1 { get; set; }
        public double Y1 { get; set; }
        public double X2 { get; set; }
        public double Y2 { get; set; }

        public override async Task Draw(Canvas2DContext context)
        {
            await context.BeginPathAsync();
            await context.MoveToAsync(X1, Y1);
            await context.LineToAsync(X2, Y2);
            await context.StrokeAsync();
        }
    }
}
